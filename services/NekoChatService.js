// Neko Chat Service - р╕Ир╕▒р╕Фр╕Бр╕▓р╕г AI Chatbot р╣Ар╕Щр╣Вр╕Бр╕░
const { createClient } = require('@supabase/supabase-js');

class NekoChatService {
    constructor() {
        this.supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_SERVICE_ROLE_KEY
        );

        // р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ър╕Вр╕нр╕Зр╣Ар╕Щр╣Вр╕Бр╕░
        this.nekoResponses = {
            greetings: [
                "р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Др╣Ир╕░! р╣Ар╕Щр╣Вр╕Бр╕░р╕бр╕▓р╣Бр╕ер╣Йр╕зр╕Др╣Ир╕▓~ ЁЯР▒ЁЯТХ",
                "р╕лр╕зр╕▒р╕Фр╕Фр╕╡р╕Др╣Ир╕░! р╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╣Ар╕Ыр╣Зр╕Щр╕вр╕▒р╕Зр╣Др╕Зр╕Ър╣Йр╕▓р╕Зр╕Др╕░? ЁЯШ╕",
                "р╕вр╕┤р╕Щр╕Фр╕╡р╕Чр╕╡р╣Ир╣Др╕Фр╣Йр╕Юр╕Ър╕Бр╕▒р╕Щр╕Др╣Ир╕░! р╣Ар╕Щр╣Вр╕Бр╕░р╕Юр╕гр╣Йр╕нр╕бр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╣Бр╕ер╣Йр╕з~ ЁЯМЯ",
                "р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Ир╣Йр╕▓! р╣Ар╕Щр╣Вр╕Бр╕░р╕гр╕нр╕Др╕╕р╕вр╕Бр╕▒р╕Ър╕Др╕╕р╕Ур╕нр╕вр╕╣р╣Ир╣Ар╕ер╕вр╕Др╣Ир╕░ ЁЯТЦ"
            ],
            encouragement: [
                "р╣Ар╕Бр╣Ир╕Зр╕бр╕▓р╕Бр╣Ар╕ер╕вр╕Др╣Ир╕░! р╣Ар╕Щр╣Вр╕Бр╕░р╕ар╕╣р╕бр╕┤р╣Гр╕Ир╣Гр╕Щр╕Хр╕▒р╕зр╕Др╕╕р╕У ЁЯМЯ",
                "р╕кр╕╣р╣Йр╣Ж р╕Щр╕░р╕Др╕░! р╕Др╕╕р╕Ур╕Чр╕│р╣Др╕Фр╣Йр╣Бр╕Щр╣Ир╕Щр╕нр╕Щ ЁЯТк",
                "р╣Др╕бр╣Ир╣Ар╕Ыр╣Зр╕Щр╣Др╕гр╕Др╣Ир╕░ р╕Чр╕╕р╕Бр╕Др╕Щр╕бр╕╡р╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕кр╕Ър╕▓р╕вр╣Гр╕И р╕Бр╕нр╕Фр╣Ж ЁЯдЧ",
                "р╣Ар╕Щр╣Вр╕Бр╕░р╣Ар╕Кр╕╖р╣Ир╕нр╣Гр╕Щр╕Хр╕▒р╕зр╕Др╕╕р╕Ур╕Др╣Ир╕░ р╕ер╕нр╕Зр╣Гр╕лр╕бр╣Ир╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕Зр╕Щр╕░ тЬи"
            ],
            love_advice: [
                "р╕Др╕зр╕▓р╕бр╕гр╕▒р╕Бр╕Хр╣Йр╕нр╕Зр╣Гр╕Кр╣Йр╕Др╕зр╕▓р╕бр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╣Бр╕ер╕░р╕Бр╕▓р╕гр╕кр╕╖р╣Ир╕нр╕кр╕▓р╕гр╕Др╣Ир╕░ ЁЯТХ",
                "р╕Бр╕▓р╕гр╣Бр╕кр╕Фр╕Зр╕Др╕зр╕▓р╕бр╕лр╣Ир╕зр╕Зр╣Гр╕вр╣Ар╕ер╣Зр╕Бр╣Ж р╕Щр╣Йр╕нр╕вр╣Ж р╕кр╕│р╕Др╕▒р╕Нр╕бр╕▓р╕Бр╣Ар╕ер╕вр╕Др╣Ир╕░ ЁЯе░",
                "р╕нр╕вр╣Ир╕▓р╕ер╕╖р╕бр╕Ър╕нр╕Бр╕гр╕▒р╕Бр╕Бр╕▒р╕Щр╕Ър╣Ир╕нр╕вр╣Ж р╕Щр╕░р╕Др╕░ ЁЯТЦ",
                "р╣Ар╕зр╕ер╕▓р╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕гр╣Ир╕зр╕бр╕Бр╕▒р╕Щр╕Др╕╖р╕нр╕Вр╕нр╕Зр╕Вр╕зр╕▒р╕Нр╕Чр╕╡р╣Ир╕Фр╕╡р╕Чр╕╡р╣Ир╕кр╕╕р╕Фр╕Др╣Ир╕░ тП░ЁЯТЭ"
            ],
            motivation: [
                "р╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╕Др╕╕р╕Ур╣Др╕Фр╣Йр╕Чр╕│р╕нр╕░р╣Др╕гр╕Чр╕╡р╣Ир╕Чр╕│р╣Гр╕лр╣Йр╕Хр╕▒р╕зр╣Ар╕нр╕Зр╕ар╕╣р╕бр╕┤р╣Гр╕Ир╕Ър╣Йр╕▓р╕Зр╕Др╕░? ЁЯМИ",
                "р╕Ир╕╕р╕Фр╣Ар╕ер╣Зр╕Бр╣Ж р╕Бр╣Зр╕кр╕│р╕Др╕▒р╕Нр╕Щр╕░р╕Др╕░ р╕Др╣Ир╕нр╕вр╣Ж р╣Др╕Ыр╕Чр╕╡р╕ер╕░р╕Вр╕▒р╣Йр╕Щ ЁЯСг",
                "р╣Ар╕Щр╣Вр╕Бр╕░р╣Ар╕лр╣Зр╕Щр╕зр╣Ир╕▓р╕Др╕╕р╕Ур╕Юр╕вр╕▓р╕вр╕▓р╕бр╕бр╕▓р╕Бр╣Ар╕ер╕вр╕Др╣Ир╕░ р╣Ар╕Бр╣Ир╕Зр╕Ир╕гр╕┤р╕Зр╣Ж! ЁЯОЙ",
                "р╕Бр╕▓р╕гр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╣Гр╕лр╕бр╣Ир╕Чр╕╕р╕Бр╕зр╕▒р╕Щр╕Др╕╖р╕нр╣Вр╕нр╕Бр╕▓р╕кр╣Гр╕лр╕бр╣Ир╕Др╣Ир╕░ ЁЯМЕ"
            ],
            comfort: [
                "р╣Ар╕Щр╣Вр╕Бр╕░р╕нр╕вр╕╣р╣Ир╕Вр╣Йр╕▓р╕Зр╣Ж р╕Др╕╕р╕Ур╣Ар╕кр╕бр╕нр╕Щр╕░р╕Др╕░ р╣Др╕бр╣Ир╕Хр╣Йр╕нр╕Зр╣Ар╕ир╕гр╣Йр╕▓р╣Ар╕ер╕в ЁЯдЧ",
                "р╕Чр╕╕р╕Бр╕Др╕Щр╕бр╕╡р╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╣Ар╕лр╕Щр╕╖р╣Ир╕нр╕вр╣Гр╕Ир╕Ър╣Йр╕▓р╕Зр╕Др╣Ир╕░ р╕Юр╕▒р╕Бр╕Ьр╣Ир╕нр╕Щр╣Гр╕лр╣Йр╣Ар╕Юр╕╡р╕вр╕Зр╕Юр╕нр╕Щр╕░ ЁЯШМ",
                "р╕нр╕вр╣Ир╕▓р╣Ар╕Бр╣Зр╕Ър╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕кр╕╢р╕Бр╣Др╕зр╣Йр╕Др╕Щр╣Ар╕Фр╕╡р╕вр╕зр╕Др╣Ир╕░ р╣Ар╕ер╣Ир╕▓р╣Гр╕лр╣Йр╣Ар╕Щр╣Вр╕Бр╕░р╕Яр╕▒р╕Зр╣Др╕Фр╣Йр╣Ар╕ер╕в ЁЯСВЁЯТХ",
                "tomorrow is another day р╕Др╣Ир╕░ р╕зр╕▒р╕Щр╕Юр╕гр╕╕р╣Ир╕Зр╕Щр╕╡р╣Йр╕Ир╕░р╕Фр╕╡р╕Вр╕╢р╣Йр╕Щр╣Бр╕Щр╣Ир╕Щр╕нр╕Щ ЁЯМЯ"
            ],
            random: [
                "р╕гр╕╣р╣Йр╣Др╕лр╕бр╕Др╕░? р╣Ар╕Щр╣Вр╕Бр╕░р╕Кр╕нр╕Ър╕Ыр╕ер╕▓р╕Чр╕╣р╕Щр╣Ир╕▓р╕бр╕▓р╕Бр╣Ар╕ер╕в! ЁЯРЯ",
                "р╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╕нр╕▓р╕Бр╕▓р╕ир╣Ар╕Ыр╣Зр╕Щр╕вр╕▒р╕Зр╣Др╕Зр╕Ър╣Йр╕▓р╕Зр╕Др╕░? р╣Ар╕Щр╣Вр╕Бр╕░р╕Кр╕нр╕Ър╣Бр╕Фр╕Фр╕нр╕Ър╕нр╕╕р╣Ир╕Щр╣Ж тШАя╕П",
                "р╕Др╕╕р╕Ур╕Кр╕нр╕Ър╕Чр╕│р╕нр╕░р╣Др╕гр╕вр╕▓р╕бр╕зр╣Ир╕▓р╕Зр╕Др╕░? р╣Ар╕Щр╣Вр╕Бр╕░р╕нр╕вр╕▓р╕Бр╕гр╕╣р╣Й! ЁЯдФ",
                "р╣Ар╕Щр╣Вр╕Бр╕░р╕нр╕вр╕▓р╕Бр╣Ар╕ер╣Ир╕Щр╕Фр╣Йр╕зр╕вр╕Бр╕▒р╕Щр╕Др╣Ир╕░ р╕бр╕╡р╣Ар╕Бр╕бр╕кр╣Мр╕нр╕░р╣Др╕гр╕кр╕Щр╕╕р╕Бр╣Ж р╣Др╕лр╕б? ЁЯОо"
            ]
        };

        // р╕Др╕│р╕лр╕ер╕▒р╕Бр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕кр╕Щр╕нр╕З
        this.responsePatterns = {
            greetings: /р╕кр╕зр╕▒р╕кр╕Фр╕╡|р╕лр╕зр╕▒р╕Фр╕Фр╕╡|р╕ор╕▒р╕ер╣Вр╕лр╕е|hello|hi|р╕кр╕Ър╕▓р╕вр╕Фр╕╡/i,
            sadness: /р╣Ар╕ир╕гр╣Йр╕▓|р╕лр╕Фр╕лр╕╣р╣И|р╣Др╕бр╣Ир╕кр╕Ър╕▓р╕вр╣Гр╕И|р╕Чр╣Йр╕н|р╕Ьр╕┤р╕Фр╕лр╕зр╕▒р╕З|р╣Ар╕лр╕Щр╕╖р╣Ир╕нр╕в/i,
            happiness: /р╕Фр╕╡р╣Гр╕И|р╕бр╕╡р╕Др╕зр╕▓р╕бр╕кр╕╕р╕В|р╕кр╕Щр╕╕р╕Б|р╕Кр╕╖р╣Ир╕Щр╕Кр╕б|р╕ар╕╣р╕бр╕┤р╣Гр╕И|р╕кр╕│р╣Ар╕гр╣Зр╕И/i,
            love: /р╕гр╕▒р╕Б|р╕Др╕┤р╕Фр╕Цр╕╢р╕З|р╕лр╕зр╕▓р╕Щ|р╕Др╕╣р╣Ир╕гр╕▒р╕Б|р╣Бр╕Яр╕Щ|р╕Др╕зр╕▓р╕бр╕гр╕▒р╕Б/i,
            encouragement: /р╕Кр╣Ир╕зр╕в|р╕Бр╕│р╕ер╕▒р╕Зр╣Гр╕И|р╕кр╕╣р╣Й|р╕Юр╕вр╕▓р╕вр╕▓р╕б|р╣Ар╕Бр╣Ир╕З|р╕Чр╕│р╣Др╕Фр╣Й/i,
            question: /р╕Чр╕│р╣Др╕б|р╕нр╕░р╣Др╕г|р╕вр╕▒р╕Зр╣Др╕З|р╣Др╕лр╕б|р╕лр╕гр╕╖р╕н|\?/i
        };
    }

    // ============================================
    // HELPER METHODS - р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕н
    // ============================================

    // р╕кр╕гр╣Йр╕▓р╕З pagination object
    _buildPagination(page = 1, limit = 20, total = 0) {
        return {
            page: parseInt(page),
            limit: parseInt(limit),
            total,
            totalPages: Math.ceil(total / limit),
            hasMore: (page * limit) < total
        };
    }

    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓
    async _checkConversationAccess(conversationId, userId) {
        try {
            const { data: conversation } = await this.supabase
                .from('neko_conversations')
                .select('user_id')
                .eq('id', conversationId)
                .single();

            if (!conversation) {
                throw new Error('р╣Др╕бр╣Ир╕Юр╕Ър╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓');
            }

            const hasAccess = conversation.user_id === userId;
            const isOwner = conversation.user_id === userId;

            return { hasAccess, isOwner, conversation };
        } catch (error) {
            throw error;
        }
    }

    // р╕кр╕гр╣Йр╕▓р╕З query р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕гр╕нр╕Зр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓
    _buildConversationQuery(baseQuery, filters = {}) {
        let query = baseQuery;

        // р╕Бр╕гр╕нр╕Зр╕Хр╕▓р╕б mood
        if (filters.mood) {
            query = query.eq('mood', filters.mood);
        }

        // р╕Бр╕гр╕нр╕Зр╕Хр╕▓р╕б emotion_detected
        if (filters.emotion) {
            query = query.eq('emotion_detected', filters.emotion);
        }

        // р╕Бр╕гр╕нр╕Зр╕Хр╕▓р╕б response_type
        if (filters.response_type) {
            query = query.eq('response_type', filters.response_type);
        }

        // р╕Бр╕гр╕нр╕Зр╕Хр╕▓р╕бр╕зр╕▒р╕Щр╕Чр╕╡р╣И
        if (filters.dateFrom) {
            query = query.gte('created_at', filters.dateFrom);
        }
        if (filters.dateTo) {
            query = query.lte('created_at', filters.dateTo);
        }

        // р╕Др╣Йр╕Щр╕лр╕▓р╣Гр╕Щр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б
        if (filters.search) {
            query = query.or(`message.ilike.%${filters.search}%,response.ilike.%${filters.search}%`);
        }

        // р╣Ар╕гр╕╡р╕вр╕Зр╕ер╕│р╕Фр╕▒р╕Ъ
        const sortBy = filters.sortBy || 'created_at';
        const sortOrder = filters.sortOrder || 'desc';
        query = query.order(sortBy, { ascending: sortOrder === 'asc' });

        return query;
    }

    // ============================================
    // CORE NEKO OPERATIONS - р╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╣Ар╕Щр╣Вр╕Бр╕░р╣Бр╕Кр╕Чр╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щ
    // ============================================

    // р╕кр╕гр╣Йр╕▓р╕Зр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╣Гр╕лр╕бр╣И (CREATE)
    async createNekoConversation(conversationData) {
        try {
            const { data, error } = await this.supabase
                .from('neko_conversations')
                .insert([{
                    user_id: conversationData.user_id,
                    message: conversationData.message,
                    response: conversationData.response,
                    emotion_detected: conversationData.emotion_detected || 'neutral',
                    response_type: conversationData.response_type || 'general',
                    mood: conversationData.mood || 'friendly',
                    context: conversationData.context || conversationData.conversation_context
                }])
                .select(`
                    *,
                    user:user_id(id, first_name, last_name, display_name, avatar_url)
                `)
                .single();

            if (error) throw error;
            return { success: true, data };
        } catch (error) {
            console.error('createNekoConversation error:', error);
            return { success: false, error: error.message };
        }
    }

    // р╕Фр╕╢р╕Зр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Хр╕▓р╕б ID (READ)
    async getNekoConversationById(conversationId, userId) {
        try {
            const accessCheck = await this._checkConversationAccess(conversationId, userId);
            
            if (!accessCheck.hasAccess) {
                throw new Error('р╣Др╕бр╣Ир╕бр╕╡р╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Щр╕╡р╣Й');
            }

            const { data, error } = await this.supabase
                .from('neko_conversations')
                .select(`
                    *,
                    user:user_id(id, first_name, last_name, display_name, avatar_url)
                `)
                .eq('id', conversationId)
                .single();

            if (error) throw error;
            return { success: true, data };
        } catch (error) {
            console.error('getNekoConversationById error:', error);
            return { success: false, error: error.message };
        }
    }

    // р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓ (UPDATE)
    async updateNekoConversation(conversationId, userId, updateData) {
        try {
            const accessCheck = await this._checkConversationAccess(conversationId, userId);
            
            if (!accessCheck.isOwner) {
                throw new Error('р╣Др╕бр╣Ир╕бр╕╡р╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╣Бр╕Бр╣Йр╣Др╕Вр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Щр╕╡р╣Й');
            }

            // р╕ер╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕Др╕зр╕гр╣Бр╕Бр╣Йр╣Др╕В
            const cleanData = { ...updateData };
            delete cleanData.id;
            delete cleanData.user_id;
            delete cleanData.created_at;

            const { data, error } = await this.supabase
                .from('neko_conversations')
                .update({
                    ...cleanData,
                    updated_at: new Date().toISOString()
                })
                .eq('id', conversationId)
                .eq('user_id', userId)
                .select(`
                    *,
                    user:user_id(id, first_name, last_name, display_name, avatar_url)
                `)
                .single();

            if (error) throw error;
            return { success: true, data };
        } catch (error) {
            console.error('updateNekoConversation error:', error);
            return { success: false, error: error.message };
        }
    }

    // р╕ер╕Ър╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓ (DELETE)
    async deleteNekoConversation(conversationId, userId) {
        try {
            const accessCheck = await this._checkConversationAccess(conversationId, userId);
            
            if (!accessCheck.isOwner) {
                throw new Error('р╣Др╕бр╣Ир╕бр╕╡р╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╕ер╕Ър╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Щр╕╡р╣Й');
            }

            const { error } = await this.supabase
                .from('neko_conversations')
                .delete()
                .eq('id', conversationId)
                .eq('user_id', userId);

            if (error) throw error;
            return { success: true, data: { message: 'р╕ер╕Ър╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з' } };
        } catch (error) {
            console.error('deleteNekoConversation error:', error);
            return { success: false, error: error.message };
        }
    }

    // ============================================
    // LISTING & FILTERING - р╕Бр╕▓р╕гр╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Бр╕ер╕░р╕Бр╕гр╕нр╕З
    // ============================================

    // р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й (LIST)
    async listNekoConversations(userId, options = {}) {
        try {
            const {
                page = 1,
                limit = 20,
                mood = null,
                emotion = null,
                response_type = null,
                search = '',
                sortBy = 'created_at',
                sortOrder = 'desc'
            } = options;

            const offset = (page - 1) * limit;

            let query = this.supabase
                .from('neko_conversations')
                .select(`
                    *,
                    user:user_id(id, first_name, last_name, display_name, avatar_url)
                `, { count: 'exact' })
                .eq('user_id', userId);

            // р╣Гр╕Кр╣Й helper function р╕кр╕│р╕лр╕гр╕▒р╕Ъ filter
            query = this._buildConversationQuery(query, { mood, emotion, response_type, search, sortBy, sortOrder });
            query = query.range(offset, offset + limit - 1);

            const { data, error, count } = await query;
            if (error) throw error;

            return {
                success: true,
                data: {
                    conversations: data,
                    pagination: this._buildPagination(page, limit, count)
                }
            };
        } catch (error) {
            console.error('listNekoConversations error:', error);
            return { success: false, error: error.message };
        }
    }

    // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Бр╕ер╕░р╕кр╕Цр╕┤р╕Хр╕┤ (USER INFO)
    async getUserNekoInfo(userId) {
        try {
            // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
            const { data: user, error: userError } = await this.supabase
                .from('users')
                .select('id, first_name, last_name, display_name, email, avatar_url, created_at')
                .eq('id', userId)
                .single();

            if (userError) throw userError;

            // р╕Фр╕╢р╕Зр╕кр╕Цр╕┤р╕Хр╕┤
            const statsResult = await this.getNekoStats(userId);
            const stats = statsResult.success ? statsResult.data : {};

            // р╕Фр╕╢р╕Зр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕ер╣Ир╕▓р╕кр╕╕р╕Ф
            const recentResult = await this.listNekoConversations(userId, { limit: 5 });
            const recentConversations = recentResult.success ? recentResult.data.conversations : [];

            // р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М mood р╕Чр╕╡р╣Ир╕Юр╕Ър╕Ър╣Ир╕нр╕в
            const favoriteMood = this._getFavoriteMood(stats.moods || {});
            const favoriteEmotion = this._getFavoriteEmotion(stats.emotions || {});

            return {
                success: true,
                data: {
                    user,
                    stats,
                    recent_conversations: recentConversations,
                    summary: {
                        total_conversations: stats.total_conversations || 0,
                        favorite_mood: favoriteMood,
                        favorite_emotion: favoriteEmotion,
                        last_conversation: recentConversations[0] || null
                    }
                }
            };
        } catch (error) {
            console.error('getUserNekoInfo error:', error);
            return { success: false, error: error.message };
        }
    }

    // р╕лр╕▓ mood р╕Чр╕╡р╣Ир╕Кр╕╖р╣Ир╕Щр╕Кр╕нр╕Ъ
    _getFavoriteMood(moods) {
        let max = 0;
        let favorite = 'friendly';
        
        for (const [mood, count] of Object.entries(moods)) {
            if (count > max) {
                max = count;
                favorite = mood;
            }
        }
        
        return favorite;
    }

    // р╕лр╕▓р╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Чр╕╡р╣Ир╕Юр╕Ър╕Ър╣Ир╕нр╕в
    _getFavoriteEmotion(emotions) {
        let max = 0;
        let favorite = 'neutral';
        
        for (const [emotion, count] of Object.entries(emotions)) {
            if (count > max) {
                max = count;
                favorite = emotion;
            }
        }
        
        return favorite;
    }

    // ============================================
    // NEKO RESPONSE GENERATION - р╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ър╕Вр╕нр╕Зр╣Ар╕Щр╣Вр╕Бр╕░
    // ============================================

    // р╕кр╕гр╣Йр╕▓р╕Зр╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕кр╕Щр╕нр╕Зр╕Вр╕нр╕Зр╣Ар╕Щр╣Вр╕Бр╕░
    async generateNekoResponse(message, userId, context = {}) {
        try {
            // р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕кр╕╢р╕Бр╣Бр╕ер╕░р╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓
            const emotion = this.analyzeEmotion(message);
            const responseType = this.determineResponseType(message, emotion);
            
            // р╣Ар╕ер╕╖р╕нр╕Бр╕Др╕│р╕Хр╕нр╕Ър╕Чр╕╡р╣Ир╣Ар╕лр╕бр╕▓р╕░р╕кр╕б
            let response = this.selectResponse(responseType, context);
            
            // р╕Ыр╕гр╕▒р╕Ър╣Бр╕Хр╣Ир╕Зр╕Др╕│р╕Хр╕нр╕Ър╕Хр╕▓р╕бр╕Ър╕гр╕┤р╕Ър╕Ч
            response = this.personalizeResponse(response, userId, context);

            return {
                message: response,
                emotion_detected: emotion,
                response_type: responseType,
                mood: this.getMoodFromEmotion(emotion)
            };
        } catch (error) {
            console.error('generateNekoResponse error:', error);
            return {
                message: "р╣Ар╕Щр╣Вр╕Бр╕░р╣Др╕бр╣Ир╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕Др╣Ир╕░ р╕Кр╣Ир╕зр╕вр╕Юр╕╣р╕Фр╣Гр╕лр╕бр╣Ир╣Др╕Фр╣Йр╣Др╕лр╕бр╕Др╕░? ЁЯШЕ",
                emotion_detected: 'neutral',
                response_type: 'default',
                mood: 'neutral'
            };
        }
    }

    // р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Ир╕▓р╕Бр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б
    analyzeEmotion(message) {
        const lowerMessage = message.toLowerCase();

        if (this.responsePatterns.sadness.test(lowerMessage)) {
            return 'sad';
        } else if (this.responsePatterns.happiness.test(lowerMessage)) {
            return 'happy';
        } else if (this.responsePatterns.love.test(lowerMessage)) {
            return 'love';
        } else if (this.responsePatterns.encouragement.test(lowerMessage)) {
            return 'need_encouragement';
        } else {
            return 'neutral';
        }
    }

    // р╕Бр╕│р╕лр╕Щр╕Фр╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕кр╕Щр╕нр╕З
    determineResponseType(message, emotion) {
        const lowerMessage = message.toLowerCase();

        if (this.responsePatterns.greetings.test(lowerMessage)) {
            return 'greetings';
        } else if (emotion === 'sad') {
            return 'comfort';
        } else if (emotion === 'happy') {
            return 'encouragement';
        } else if (emotion === 'love') {
            return 'love_advice';
        } else if (emotion === 'need_encouragement') {
            return 'motivation';
        } else if (this.responsePatterns.question.test(lowerMessage)) {
            return 'helpful';
        } else {
            return 'random';
        }
    }

    // р╣Ар╕ер╕╖р╕нр╕Бр╕Др╕│р╕Хр╕нр╕Ъ
    selectResponse(responseType, context = {}) {
        const responses = this.nekoResponses[responseType] || this.nekoResponses.random;
        
        // р╣Ар╕ер╕╖р╕нр╕Бр╕Др╕│р╕Хр╕нр╕Ър╣Бр╕Ър╕Ър╕кр╕╕р╣Ир╕б
        let selectedResponse = responses[Math.floor(Math.random() * responses.length)];

        // р╣Ар╕Юр╕┤р╣Ир╕бр╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕кр╕Щр╕нр╕Зр╕Юр╕┤р╣Ар╕ир╕йр╕Хр╕▓р╕бр╣Ар╕зр╕ер╕▓
        const hour = new Date().getHours();
        if (responseType === 'greetings') {
            if (hour >= 5 && hour < 12) {
                selectedResponse = "р╕нр╕гр╕╕р╕Ур╕кр╕зр╕▒р╕кр╕Фр╕┤р╣Мр╕Др╣Ир╕░! " + selectedResponse;
            } else if (hour >= 12 && hour < 17) {
                selectedResponse = "р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Хр╕нр╕Щр╕Ър╣Ир╕▓р╕вр╕Др╣Ир╕░! " + selectedResponse;
            } else if (hour >= 17 && hour < 21) {
                selectedResponse = "р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Хр╕нр╕Щр╣Ар╕вр╣Зр╕Щр╕Др╣Ир╕░! " + selectedResponse;
            } else {
                selectedResponse = "р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Хр╕нр╕Щр╕Бр╕ер╕▓р╕Зр╕Др╕╖р╕Щр╕Др╣Ир╕░! " + selectedResponse;
            }
        }

        return selectedResponse;
    }

    // р╕Ыр╕гр╕▒р╕Ър╣Бр╕Хр╣Ир╕Зр╕Др╕│р╕Хр╕нр╕Ър╕Хр╕▓р╕бр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
    personalizeResponse(response, userId, context) {
        // р╣Ар╕Юр╕┤р╣Ир╕бр╕Кр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Цр╣Йр╕▓р╕бр╕╡
        if (context.userName) {
            response = response.replace(/р╕Др╕╕р╕У/g, `р╕Др╕╕р╕У${context.userName}`);
        }

        // р╣Ар╕Юр╕┤р╣Ир╕бр╕нр╕┤р╣Вр╕бр╕Ир╕┤р╕Хр╕▓р╕бр╕Ър╕гр╕┤р╕Ър╕Ч
        if (context.isPartnerConnected) {
            response += " р╕нр╕вр╣Ир╕▓р╕ер╕╖р╕бр╕Др╕╕р╕вр╕Бр╕▒р╕Ър╕Др╕╣р╣Ир╕гр╕▒р╕Бр╕Фр╣Йр╕зр╕вр╕Щр╕░р╕Др╕░ ЁЯТХ";
        }

        return response;
    }

    // р╣Бр╕Ыр╕ер╕Зр╕нр╕▓р╕гр╕бр╕Ур╣Мр╣Ар╕Ыр╣Зр╕Щ mood
    getMoodFromEmotion(emotion) {
        const moodMap = {
            'happy': 'cheerful',
            'sad': 'sympathetic',
            'love': 'romantic',
            'need_encouragement': 'supportive',
            'neutral': 'friendly'
        };
        return moodMap[emotion] || 'friendly';
    }

    // р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Бр╕▒р╕Ър╣Ар╕Щр╣Вр╕Бр╕░ (Alias р╕кр╕│р╕лр╕гр╕▒р╕Ъ createNekoConversation)
    async saveNekoConversation(conversationData) {
        return await this.createNekoConversation(conversationData);
    }

    // ============================================
    // ADVANCED FEATURES - р╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕З
    // ============================================

    // р╕Фр╕╢р╕Зр╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Бр╕▒р╕Ър╣Ар╕Щр╣Вр╕Бр╕░ (Alias р╕кр╕│р╕лр╕гр╕▒р╕Ъ listNekoConversations)
    async getNekoConversations(userId, page = 1, limit = 20) {
        const result = await this.listNekoConversations(userId, { page, limit });
        
        if (result.success) {
            return {
                success: true,
                data: result.data.conversations,
                pagination: result.data.pagination
            };
        }
        
        return result;
    }

    // р╕Фр╕╢р╕Зр╕кр╕Цр╕┤р╕Хр╕┤р╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Бр╕▒р╕Ър╣Ар╕Щр╣Вр╕Бр╕░
    async getNekoStats(userId) {
        try {
            const { data: conversations } = await this.supabase
                .from('neko_conversations')
                .select('emotion_detected, response_type, mood, created_at')
                .eq('user_id', userId);

            if (!conversations || conversations.length === 0) {
                return { 
                    success: true, 
                    data: { 
                        total_conversations: 0,
                        emotions: {},
                        response_types: {},
                        moods: {},
                        recent_activity: []
                    } 
                };
            }

            const stats = {
                total_conversations: conversations.length,
                emotions: {},
                response_types: {},
                moods: {},
                recent_activity: []
            };

            // р╕Щр╕▒р╕Ър╕нр╕▓р╕гр╕бр╕Ур╣М
            conversations.forEach(conv => {
                const emotion = conv.emotion_detected || 'neutral';
                stats.emotions[emotion] = (stats.emotions[emotion] || 0) + 1;
            });

            // р╕Щр╕▒р╕Ър╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕кр╕Щр╕нр╕З
            conversations.forEach(conv => {
                const type = conv.response_type || 'general';
                stats.response_types[type] = (stats.response_types[type] || 0) + 1;
            });

            // р╕Щр╕▒р╕Ъ mood
            conversations.forEach(conv => {
                const mood = conv.mood || 'friendly';
                stats.moods[mood] = (stats.moods[mood] || 0) + 1;
            });

            // р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕ер╣Ир╕▓р╕кр╕╕р╕Ф
            stats.recent_activity = conversations
                .slice(0, 5)
                .map(conv => ({
                    date: conv.created_at,
                    emotion: conv.emotion_detected,
                    mood: conv.mood
                }));

            return { success: true, data: stats };
        } catch (error) {
            console.error('getNekoStats error:', error);
            return { success: false, error: error.message };
        }
    }

    // р╕Др╣Йр╕Щр╕лр╕▓р╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓
    async searchNekoConversations(userId, searchTerm, options = {}) {
        try {
            const searchOptions = {
                ...options,
                search: searchTerm,
                limit: options.limit || 50
            };

            return await this.listNekoConversations(userId, searchOptions);
        } catch (error) {
            console.error('searchNekoConversations error:', error);
            return { success: false, error: error.message };
        }
    }

    // р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕Ир╕▓р╕Бр╣Ар╕Щр╣Вр╕Бр╕░
    async generateDailyAdvice(userId) {
        try {
            // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕ер╣Ир╕▓р╕кр╕╕р╕Фр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
            const [userResult, conversationsResult] = await Promise.all([
                this.supabase.from('users').select('*').eq('id', userId).single(),
                this.getNekoConversations(userId, 1, 5)
            ]);

            const advice = {
                message: "",
                category: "general",
                mood: "friendly"
            };

            // р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М pattern р╕Ир╕▓р╕Бр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕ер╣Ир╕▓р╕кр╕╕р╕Ф
            if (conversationsResult.success && conversationsResult.data.length > 0) {
                const recentEmotions = conversationsResult.data.map(c => c.emotion_detected);
                const sadCount = recentEmotions.filter(e => e === 'sad').length;
                const happyCount = recentEmotions.filter(e => e === 'happy').length;

                if (sadCount > happyCount) {
                    advice.message = "р╣Ар╕Щр╣Вр╕Бр╕░р╕кр╕▒р╕Зр╣Ар╕Бр╕Хр╣Ар╕лр╣Зр╕Щр╕зр╣Ир╕▓р╕Др╕╕р╕Ур╕Фр╕╣р╣Ар╕ир╕гр╣Йр╕▓р╣Ж р╕Ър╣Ир╕нр╕вр╣Ар╕ер╕вр╕Др╣Ир╕░ р╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╕ер╕нр╕Зр╕Чр╕│р╕нр╕░р╣Др╕гр╕Чр╕╡р╣Ир╕Чр╕│р╣Гр╕лр╣Йр╕Хр╕▒р╕зр╣Ар╕нр╕Зр╕бр╕╡р╕Др╕зр╕▓р╕бр╕кр╕╕р╕Вр╕Фр╕╣р╕Щр╕░р╕Др╕░ р╕нр╕▓р╕Ир╕Ир╕░р╕Яр╕▒р╕Зр╣Ар╕Юр╕ер╕З р╕Бр╕┤р╕Щр╕Вр╕нр╕Зр╕нр╕гр╣Ир╕нр╕в р╕лр╕гр╕╖р╕нр╕Др╕╕р╕вр╕Бр╕▒р╕Ър╕Др╕Щр╕Чр╕╡р╣Ир╕гр╕▒р╕Б ЁЯТХ";
                    advice.category = "comfort";
                    advice.mood = "sympathetic";
                } else if (happyCount > 0) {
                    advice.message = "р╣Ар╕Щр╣Вр╕Бр╕░р╕Фр╕╡р╣Гр╕Ир╕Чр╕╡р╣Ир╣Ар╕лр╣Зр╕Щр╕Др╕╕р╕Ур╕бр╕╡р╕Др╕зр╕▓р╕бр╕кр╕╕р╕Вр╕Др╣Ир╕░! р╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╕ер╕нр╕Зр╣Бр╕Кр╕гр╣Мр╕Др╕зр╕▓р╕бр╕кр╕╕р╕Вр╣Гр╕лр╣Йр╕Бр╕▒р╕Ър╕Др╕Щр╕гр╕нр╕Ър╕Вр╣Йр╕▓р╕Зр╕Фр╣Йр╕зр╕вр╕Щр╕░ р╕вр╕┤р╣Йр╕бр╣Бр╕Ыр╣Кр╕Ър╕Щр╕╢р╕Зр╕Бр╣Зр╕Чр╕│р╣Гр╕лр╣Йр╕Др╕Щр╕нр╕╖р╣Ир╕Щр╕бр╕╡р╕Др╕зр╕▓р╕бр╕кр╕╕р╕Вр╣Др╕Фр╣Йр╣Ар╕ер╕в ЁЯШК";
                    advice.category = "encouragement";
                    advice.mood = "cheerful";
                }
            } else {
                // р╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕Чр╕▒р╣Ир╕зр╣Др╕Ы
                const generalAdvice = [
                    "р╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╕нр╕вр╣Ир╕▓р╕ер╕╖р╕бр╕Фр╕╖р╣Ир╕бр╕Щр╣Йр╕│р╣Гр╕лр╣Йр╣Ар╕Юр╕╡р╕вр╕Зр╕Юр╕нр╕Щр╕░р╕Др╕░ р╕кр╕╕р╕Вр╕ар╕▓р╕Юр╕Фр╕╡р╕кр╕│р╕Др╕▒р╕Нр╕бр╕▓р╕Бр╣Ар╕ер╕в! ЁЯТз",
                    "р╕ер╕нр╕Зр╕лр╕▓р╣Ар╕зр╕ер╕▓р╕Чр╕│р╕кр╕┤р╣Ир╕Зр╕Чр╕╡р╣Ир╕гр╕▒р╕Бр╕кр╕▒р╕Бр╕лр╕Щр╣Ир╕нр╕вр╕Щр╕░р╕Др╕░ р╣Бр╕бр╣Йр╣Бр╕Др╣И 10 р╕Щр╕▓р╕Чр╕╡р╕Бр╣Зр╕Чр╕│р╣Гр╕лр╣Йр╕Ир╕┤р╕Хр╣Гр╕Ир╕кр╕Фр╕Кр╕╖р╣Ир╕Щ ЁЯМ┐",
                    "р╕нр╕вр╣Ир╕▓р╕ер╕╖р╕бр╕Ър╕нр╕Бр╕Др╕Щр╕Чр╕╡р╣Ир╕гр╕▒р╕Бр╕зр╣Ир╕▓р╕гр╕▒р╕Бр╕Юр╕зр╕Бр╣Ар╕Вр╕▓р╕Щр╕░р╕Др╕░ р╕Др╕│р╣Ар╕ер╣Зр╕Бр╣Ж р╕бр╕╡р╕Юр╕ер╕▒р╕Зр╕бр╕лр╕▓р╕ир╕▓р╕ер╣Ар╕ер╕в ЁЯТЦ",
                    "р╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╕ер╕нр╕Зр╕бр╕нр╕Зр╕лр╕▓р╕кр╕┤р╣Ир╕Зр╣Ар╕ер╣Зр╕Бр╣Ж р╕Чр╕╡р╣Ир╕Чр╕│р╣Гр╕лр╣Йр╕Вр╕нр╕Ър╕Др╕╕р╕Ур╕Фр╕╣р╕Др╣Ир╕░ р╕Др╕зр╕▓р╕бр╕Вр╕нр╕Ър╕Др╕╕р╕Ур╕Чр╕│р╣Гр╕лр╣Йр╣Гр╕Ир╕кр╕Ър╕▓р╕в ЁЯЩП"
                ];
                advice.message = generalAdvice[Math.floor(Math.random() * generalAdvice.length)];
            }

            return { success: true, data: advice };
        } catch (error) {
            console.error('generateDailyAdvice error:', error);
            return { 
                success: true, 
                data: {
                    message: "р╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╣Ар╕Ыр╣Зр╕Щр╕зр╕▒р╕Щр╣Гр╕лр╕бр╣Ир╕Чр╕╡р╣Ир╕кр╕зр╕вр╕Зр╕▓р╕б р╕ер╕нр╕Зр╕Чр╕│р╕кр╕┤р╣Ир╕Зр╕Фр╕╡р╣Ж р╣Гр╕лр╣Йр╕Бр╕▒р╕Ър╕Хр╕▒р╕зр╣Ар╕нр╕Зр╕Щр╕░р╕Др╕░ ЁЯМИ",
                    category: "general",
                    mood: "friendly"
                }
            };
        }
    }

    // р╕кр╕гр╣Йр╕▓р╕З Morning Greeting
    async generateMorningGreeting(userId) {
        try {
            const greetings = [
                "р╕нр╕гр╕╕р╕Ур╕кр╕зр╕▒р╕кр╕Фр╕┤р╣Мр╕Др╣Ир╕░! р╕зр╕▒р╕Щр╣Гр╕лр╕бр╣Ир╕бр╕▓р╣Бр╕ер╣Йр╕з р╕Юр╕гр╣Йр╕нр╕бр╕Чр╕╡р╣Ир╕Ир╕░р╕Чр╕│р╣Гр╕лр╣Йр╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╣Ар╕Ыр╣Зр╕Щр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Фр╕╡р╣Бр╕ер╣Йр╕зр╕лр╕гр╕╖р╕нр╕вр╕▒р╕Зр╕Др╕░? ЁЯМЕ",
                "р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Хр╕нр╕Щр╣Ар╕Кр╣Йр╕▓р╕Др╣Ир╕░! р╣Ар╕Щр╣Вр╕Бр╕░р╕лр╕зр╕▒р╕Зр╕зр╣Ир╕▓р╕Др╕╕р╕Ур╕Ир╕░р╕бр╕╡р╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕кр╕Фр╣Гр╕кр╣Бр╕ер╕░р╣Ар╕Хр╣Зр╕бр╣Др╕Ыр╕Фр╣Йр╕зр╕вр╕гр╕нр╕вр╕вр╕┤р╣Йр╕бр╕Щр╕░р╕Др╕░ ЁЯШК",
                "р╣Ар╕Кр╣Йр╕▓р╕Фр╕╡р╕Др╣Ир╕░! р╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╕бр╕╡р╣Бр╕Ьр╕Щр╕нр╕░р╣Др╕гр╕кр╕Щр╕╕р╕Бр╣Ж р╣Др╕лр╕бр╕Др╕░? р╣Ар╕Щр╣Вр╕Бр╕░р╕нр╕вр╕▓р╕Бр╕Яр╕▒р╕Зр╣Ар╕ер╕в! ЁЯМ╕",
                "р╕лр╕зр╕▒р╕Фр╕Фр╕╡р╕Хр╕нр╕Щр╣Ар╕Кр╣Йр╕▓р╕Др╣Ир╕░! р╕нр╕вр╣Ир╕▓р╕ер╕╖р╕бр╕Чр╕▓р╕Щр╕нр╕▓р╕лр╕▓р╕гр╣Ар╕Кр╣Йр╕▓р╣Бр╕ер╕░р╕Фр╕╖р╣Ир╕бр╕Щр╣Йр╕│р╣Гр╕лр╣Йр╣Ар╕Юр╕╡р╕вр╕Зр╕Юр╕нр╕Щр╕░р╕Др╕░ ЁЯеРтШХ"
            ];

            const selectedGreeting = greetings[Math.floor(Math.random() * greetings.length)];

            // р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Др╕│р╕Чр╕▒р╕Бр╕Чр╕▓р╕вр╕Ыр╕гр╕░р╕Ир╕│р╕зр╕▒р╕Щ
            await this.supabase
                .from('daily_greetings')
                .upsert([{
                    user_id: userId,
                    greeting_text: selectedGreeting,
                    greeting_date: new Date().toISOString().split('T')[0]
                }]);

            return { success: true, data: { message: selectedGreeting } };
        } catch (error) {
            console.error('generateMorningGreeting error:', error);
            return { 
                success: true, 
                data: { 
                    message: "р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Хр╕нр╕Щр╣Ар╕Кр╣Йр╕▓р╕Др╣Ир╕░! р╕Вр╕нр╣Гр╕лр╣Йр╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╣Ар╕Ыр╣Зр╕Щр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Фр╕╡р╕Щр╕░р╕Др╕░ ЁЯМЮ" 
                } 
            };
        }
    }

    // р╕Фр╕╢р╕Зр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Хр╕▓р╕б mood
    async getConversationsByMood(userId, mood, limit = 10) {
        try {
            const { data, error } = await this.supabase
                .from('neko_conversations')
                .select(`
                    *,
                    user:user_id(id, first_name, last_name, display_name, avatar_url)
                `)
                .eq('user_id', userId)
                .eq('mood', mood)
                .order('created_at', { ascending: false })
                .limit(limit);

            if (error) throw error;
            return { success: true, data };
        } catch (error) {
            console.error('getConversationsByMood error:', error);
            return { success: false, error: error.message };
        }
    }

    // р╕кр╣Ир╕Зр╕нр╕нр╕Бр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓
    async exportNekoConversations(userId, format = 'json') {
        try {
            const { data: conversations } = await this.supabase
                .from('neko_conversations')
                .select(`
                    *,
                    user:user_id(id, first_name, last_name, display_name)
                `)
                .eq('user_id', userId)
                .order('created_at', { ascending: true });

            if (format === 'csv') {
                const csvData = conversations.map(conv => ({
                    р╕зр╕▒р╕Щр╕Чр╕╡р╣И: new Date(conv.created_at).toLocaleDateString('th-TH'),
                    р╣Ар╕зр╕ер╕▓: new Date(conv.created_at).toLocaleTimeString('th-TH'),
                    р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Вр╕нр╕Зр╕Др╕╕р╕У: conv.message,
                    р╕Хр╕нр╕Ър╕Бр╕ер╕▒р╕Ър╕Вр╕нр╕Зр╣Ар╕Щр╣Вр╕Бр╕░: conv.response,
                    р╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Чр╕╡р╣Ир╕Хр╕гр╕зр╕Ир╕Юр╕Ъ: conv.emotion_detected,
                    р╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕кр╕Щр╕нр╕З: conv.response_type,
                    р╕нр╕▓р╕гр╕бр╕Ур╣Мр╕Вр╕нр╕Зр╣Ар╕Щр╣Вр╕Бр╕░: conv.mood
                }));
                
                return { success: true, data: csvData, format: 'csv' };
            }

            return { success: true, data: conversations, format: 'json' };
        } catch (error) {
            console.error('exportNekoConversations error:', error);
            return { success: false, error: error.message };
        }
    }

    // р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕кр╕╢р╕Бр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
    async analyzeUserMood(userId, days = 7) {
        try {
            const dateFrom = new Date();
            dateFrom.setDate(dateFrom.getDate() - days);

            const { data: conversations } = await this.supabase
                .from('neko_conversations')
                .select('emotion_detected, created_at')
                .eq('user_id', userId)
                .gte('created_at', dateFrom.toISOString())
                .order('created_at', { ascending: true });

            if (!conversations || conversations.length === 0) {
                return {
                    success: true,
                    data: {
                        overall_mood: 'neutral',
                        mood_trend: 'stable',
                        daily_moods: {},
                        recommendations: ['р╕ер╕нр╕Зр╕Др╕╕р╕вр╕Бр╕▒р╕Ър╣Ар╕Щр╣Вр╕Бр╕░р╕Ър╣Ир╕нр╕вр╣Ж р╕Щр╕░р╕Др╕░ р╣Ар╕Щр╣Вр╕Бр╕░р╕Юр╕гр╣Йр╕нр╕бр╕Яр╕▒р╕Зр╣Ар╕кр╕бр╕н! ЁЯР▒']
                    }
                };
            }

            // р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕нр╕▓р╕гр╕бр╕Ур╣Мр╕гр╕▓р╕вр╕зр╕▒р╕Щ
            const dailyMoods = {};
            conversations.forEach(conv => {
                const day = new Date(conv.created_at).toISOString().slice(0, 10);
                if (!dailyMoods[day]) {
                    dailyMoods[day] = { sad: 0, happy: 0, neutral: 0, love: 0, need_encouragement: 0 };
                }
                dailyMoods[day][conv.emotion_detected] = (dailyMoods[day][conv.emotion_detected] || 0) + 1;
            });

            // р╕Ыр╕гр╕░р╣Ар╕бр╕┤р╕Щр╕нр╕▓р╕гр╕бр╕Ур╣Мр╣Вр╕Фр╕вр╕гр╕зр╕б
            const emotionCounts = { sad: 0, happy: 0, neutral: 0, love: 0, need_encouragement: 0 };
            conversations.forEach(conv => {
                emotionCounts[conv.emotion_detected] = (emotionCounts[conv.emotion_detected] || 0) + 1;
            });

            const overallMood = Object.keys(emotionCounts).reduce((a, b) => 
                emotionCounts[a] > emotionCounts[b] ? a : b
            );

            // р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│
            const recommendations = this._generateMoodRecommendations(overallMood, emotionCounts);

            return {
                success: true,
                data: {
                    overall_mood: overallMood,
                    mood_trend: this._calculateMoodTrend(dailyMoods),
                    daily_moods: dailyMoods,
                    emotion_distribution: emotionCounts,
                    recommendations
                }
            };
        } catch (error) {
            console.error('analyzeUserMood error:', error);
            return { success: false, error: error.message };
        }
    }

    // р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕Хр╕▓р╕бр╕нр╕▓р╕гр╕бр╕Ур╣М
    _generateMoodRecommendations(overallMood, emotionCounts) {
        const recommendations = [];

        if (overallMood === 'sad') {
            recommendations.push('р╣Ар╕Щр╣Вр╕Бр╕░р╣Ар╕лр╣Зр╕Щр╕зр╣Ир╕▓р╕Др╕╕р╕Ур╣Ар╕ир╕гр╣Йр╕▓р╣Ж р╕Ър╣Ир╕нр╕вр╣Ар╕ер╕вр╕Др╣Ир╕░ р╕ер╕нр╕Зр╕лр╕▓р╣Ар╕зр╕ер╕▓р╕Юр╕▒р╕Бр╕Ьр╣Ир╕нр╕Щр╣Бр╕ер╕░р╕Чр╕│р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Чр╕╡р╣Ир╕Кр╕нр╕Ър╕Щр╕░р╕Др╕░ ЁЯМ╕');
            recommendations.push('р╕нр╕вр╣Ир╕▓р╕ер╕╖р╕бр╕Др╕╕р╕вр╕Бр╕▒р╕Ър╕Др╕Щр╕Чр╕╡р╣Ир╕гр╕▒р╕Бр╕лр╕гр╕╖р╕нр╣Ар╕Юр╕╖р╣Ир╕нр╕Щр╕Чр╕╡р╣Ир╣Др╕зр╣Йр╣Гр╕Ир╣Др╕Фр╣Йр╕Щр╕░р╕Др╕░ р╕Бр╕▓р╕гр╣Бр╕Ър╣Ир╕Зр╕Ыр╕▒р╕Щр╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕кр╕╢р╕Бр╕Кр╣Ир╕зр╕вр╣Др╕Фр╣Йр╕бр╕▓р╕Бр╣Ар╕ер╕в ЁЯТХ');
        } else if (overallMood === 'happy') {
            recommendations.push('р╣Ар╕Бр╣Ир╕Зр╕бр╕▓р╕Бр╣Ар╕ер╕вр╕Др╣Ир╕░! р╕Др╕╕р╕Ур╕Фр╕╣р╕бр╕╡р╕Др╕зр╕▓р╕бр╕кр╕╕р╕Вр╕Фр╕╡р╕Ир╕▒р╕З р╣Ар╕Щр╣Вр╕Бр╕░р╕Фр╕╡р╣Гр╕Ир╕Фр╣Йр╕зр╕в ЁЯОЙ');
            recommendations.push('р╕ер╕нр╕Зр╣Бр╕Кр╕гр╣Мр╕Др╕зр╕▓р╕бр╕кр╕╕р╕Вр╣Гр╕лр╣Йр╕Др╕Щр╕гр╕нр╕Ър╕Вр╣Йр╕▓р╕Зр╕Фр╣Йр╕зр╕вр╕Щр╕░р╕Др╕░ р╕гр╕нр╕вр╕вр╕┤р╣Йр╕бр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╕Чр╕│р╣Гр╕лр╣Йр╕Др╕Щр╕нр╕╖р╣Ир╕Щр╕бр╕╡р╕Др╕зр╕▓р╕бр╕кр╕╕р╕Вр╣Др╕Фр╣Йр╣Ар╕ер╕в ЁЯШК');
        } else if (overallMood === 'love') {
            recommendations.push('р╣Ар╕Щр╣Вр╕Бр╕░р╣Ар╕лр╣Зр╕Щр╕зр╣Ир╕▓р╕Др╕╕р╕Ур╣Ар╕Хр╣Зр╕бр╣Др╕Ыр╕Фр╣Йр╕зр╕вр╕Др╕зр╕▓р╕бр╕гр╕▒р╕Бр╣Ар╕ер╕вр╕Др╣Ир╕░ р╕лр╕зр╕▓р╕Щр╕бр╕▓р╕Бр╣Ж ЁЯТЦ');
            recommendations.push('р╕нр╕вр╣Ир╕▓р╕ер╕╖р╕бр╕Фр╕╣р╣Бр╕ер╕Хр╕▒р╕зр╣Ар╕нр╕Зр╕Фр╣Йр╕зр╕вр╕Щр╕░р╕Др╕░ р╕Др╕зр╕▓р╕бр╕гр╕▒р╕Бр╕Чр╕╡р╣Ир╕вр╕▒р╣Ир╕Зр╕вр╕╖р╕Щр╕Хр╣Йр╕нр╕Зр╣Ар╕гр╕┤р╣Ир╕бр╕Ир╕▓р╕Бр╕гр╕▒р╕Бр╕Хр╕▒р╕зр╣Ар╕нр╕Зр╕Бр╣Ир╕нр╕Щ ЁЯМЯ');
        }

        return recommendations;
    }

    // р╕Др╕│р╕Щр╕зр╕Ур╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╕нр╕▓р╕гр╕бр╕Ур╣М
    _calculateMoodTrend(dailyMoods) {
        const days = Object.keys(dailyMoods).sort();
        if (days.length < 2) return 'stable';

        // р╕Др╕│р╕Щр╕зр╕Ур╕Др╕░р╣Бр╕Щр╕Щр╕нр╕▓р╕гр╕бр╕Ур╣М (happy = 2, love = 1, neutral = 0, need_encouragement = -1, sad = -2)
        const moodScores = days.map(day => {
            const moods = dailyMoods[day];
            return (moods.happy * 2) + (moods.love * 1) + (moods.neutral * 0) + 
                   (moods.need_encouragement * -1) + (moods.sad * -2);
        });

        const firstHalf = moodScores.slice(0, Math.floor(moodScores.length / 2));
        const secondHalf = moodScores.slice(Math.floor(moodScores.length / 2));

        const firstAvg = firstHalf.reduce((a, b) => a + b, 0) / firstHalf.length;
        const secondAvg = secondHalf.reduce((a, b) => a + b, 0) / secondHalf.length;

        if (secondAvg > firstAvg + 0.5) return 'improving';
        if (secondAvg < firstAvg - 0.5) return 'declining';
        return 'stable';
    }
}

module.exports = NekoChatService;
